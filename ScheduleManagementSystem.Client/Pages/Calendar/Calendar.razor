@page "/calendar"
@attribute [Authorize]
@inject EventService EventService
@inject UserService UserService
@inject GroupService GroupService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@using ScheduleManagementSystem.Shared.DTOs
@using ScheduleManagementSystem.Shared.Enums
@using System.Globalization
@using ScheduleManagementSystem.Client.Services
@using System.Text.RegularExpressions

<div style="display: flex; gap: 20px; flex-wrap: wrap;">
    <!-- Group Filter -->
    <div>
        <label for="groupFilter" style="margin-right: 8px; font-size: 14px; font-weight: 500; color: #0A3161;">Group:</label>
        <select id="groupFilter" @bind="selectedGroupId" style="padding: 8px; border-radius: 4px; border: 1px solid #ddd;">
            <option value="0">All Groups</option>
            @foreach (var group in userGroups)
            {
                <option value="@group.Id">@group.Name</option>
            }
        </select>
    </div>
    <!-- Event Type Filter -->
    <div>
        <label for="typeFilter" style="margin-right: 8px; font-size: 14px; font-weight: 500; color: #0A3161;">Type:</label>
        <select id="typeFilter" @bind="selectedEventType" style="padding: 8px; border-radius: 4px; border: 1px solid #ddd;">
            <option value="">All Types</option>
            @foreach (EventType type in Enum.GetValues<EventType>())
            {
                <option value="@type">@type.ToString()</option>
            }
        </select>
    </div>
    <!-- Search Filter -->
    <div>
        <label for="searchFilter" style="margin-right: 8px; font-size: 14px; font-weight: 500; color: #0A3161;">Search:</label>
        <input id="searchFilter" @bind="searchTerm" placeholder="Search events..." style="padding: 8px; border-radius: 4px; border: 1px solid #ddd;" />
    </div>
</div>

<div style="max-width: 1200px; margin: 0 auto; padding: 20px;">
    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 30px; flex-wrap: wrap; gap: 20px;">
        <div>
            <h1 style="color: #0A3161; margin-bottom: 8px; font-size: 28px; font-weight: 600;">Academic Calendar</h1>
            <p style="color: #666; margin: 0; font-size: 16px;">Manage your schedule and upcoming events</p>
        </div>

        <div style="display: flex; align-items: center; gap: 20px; flex-wrap: wrap;">
            <div style="display: flex; align-items: center; gap: 15px; background-color: white; padding: 10px 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                <button style="padding: 8px 12px; border-radius: 4px; background-color: #f8f9fa; border: 1px solid #ddd; cursor: pointer;" @onclick="PreviousMonth">
                    ‹
                </button>
                <h2 style="margin: 0; font-size: 18px; font-weight: 600; color: #0A3161; min-width: 180px; text-align: center;">@currentDate.ToString("MMMM yyyy")</h2>
                <button style="padding: 8px 12px; border-radius: 4px; background-color: #f8f9fa; border: 1px solid #ddd; cursor: pointer;" @onclick="NextMonth">
                    ›
                </button>
            </div>

            @if (isTeacher || isAdmin)
            {
                <button style="background-color: #0A3161; color: white; padding: 12px 24px; border-radius: 6px; font-weight: 500; cursor: pointer; border: none; font-size: 16px;" @onclick="ShowAddEventModal">
                    + Add Event
                </button>
            }
        </div>
    </div>

    <div style="display: flex; gap: 20px; margin-bottom: 20px; flex-wrap: wrap;">
        <div style="display: flex; align-items: center; gap: 8px; font-size: 14px; color: #555;">
            <span style="width: 12px; height: 12px; border-radius: 2px; background-color: #4CAF50;"></span> Lecture
        </div>
        <div style="display: flex; align-items: center; gap: 8px; font-size: 14px; color: #555;">
            <span style="width: 12px; height: 12px; border-radius: 2px; background-color: #2196F3;"></span> Seminar
        </div>
        <div style="display: flex; align-items: center; gap: 8px; font-size: 14px; color: #555;">
            <span style="width: 12px; height: 12px; border-radius: 2px; background-color: #FF9800;"></span> Practice
        </div>
        <div style="display: flex; align-items: center; gap: 8px; font-size: 14px; color: #555;">
            <span style="width: 12px; height: 12px; border-radius: 2px; background-color: #9C27B0;"></span> Laboratory
        </div>
        <div style="display: flex; align-items: center; gap: 8px; font-size: 14px; color: #555;">
            <span style="width: 12px; height: 12px; border-radius: 2px; background-color: #f44336;"></span> Exam
        </div>
        <div style="display: flex; align-items: center; gap: 8px; font-size: 14px; color: #555;">
            <span style="width: 12px; height: 12px; border-radius: 2px; background-color: #607D8B;"></span> Other
        </div>
    </div>

    @if (isLoading)
    {
        <div style="text-align: center; padding: 60px 20px; color: #666;">
            <p>Loading calendar...</p>
        </div>
    }
    else
    {
        <div style="background-color: white; border-radius: 8px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); overflow: hidden;">
            <div style="display: grid; grid-template-columns: repeat(7, 1fr); background-color: #0A3161; color: white;">
                @foreach (var day in new[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" })
                {
                    <div style="padding: 15px 8px; text-align: center; font-weight: 600; font-size: 14px; letter-spacing: 0.5px;">@day</div>
                }
            </div>

            <div style="display: grid; grid-template-columns: repeat(7, 1fr); border-left: 1px solid #e0e0e0; border-bottom: 1px solid #e0e0e0;">
                @foreach (var day in GetCalendarDays())
                {
                    var dayStyle = $"min-height: 120px; padding: 8px; border-right: 1px solid #e0e0e0; border-top: 1px solid #e0e0e0; position: relative; display: flex; flex-direction: column; background-color: {(day.IsCurrentMonth ? "white" : "#fafafa")}; {(day.IsToday ? "background-color: rgba(10, 49, 97, 0.05); border: 2px solid #0A3161;" : "")}";

                    <div style="@dayStyle">
                        <div style="font-weight: 600; font-size: 14px; margin-bottom: 4px; color: @(day.IsCurrentMonth ? (day.IsToday ? "#0A3161" : "#1A1A1A") : "#ccc");">@day.Date.Day</div>
                        <div style="flex: 1; display: flex; flex-direction: column; gap: 2px; overflow: hidden;">
                            @foreach (var calendarEvent in day.Events)
                            {
                                var eventBgColor = GetEventBackgroundColor(calendarEvent.Type);
                                var eventStartTime = SafeFormatTimeSpan(calendarEvent.StartTime);
                                var eventEndTime = SafeFormatTimeSpan(calendarEvent.EndTime);

                                var truncatedTitle = (calendarEvent.Title ?? "Untitled");

                                @if (truncatedTitle.Length > 12)
                                {
                                    truncatedTitle = truncatedTitle.Substring(0, 12) + "...";
                                }

                                <div style="background-color: @eventBgColor; color: white; padding: 4px 6px; border-radius: 4px; font-size: 11px; line-height: 1.2; cursor: pointer; overflow: hidden; display: block; width: 100%;"
                                     @onclick="@(() => ShowEventDetails(calendarEvent))"
                                     title="@(calendarEvent.Title ?? "Untitled")">
                                    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                                        <span style="font-weight: 500; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 70%;">@truncatedTitle</span>
                                        <span style="font-size: 10px; opacity: 0.9; flex-shrink: 0;">@eventStartTime-@eventEndTime</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@* Event Details Modal *@
@if (showEventModal && selectedEvent != null)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; padding: 20px;" @onclick="CloseEventModal">
        <div style="background-color: white; border-radius: 8px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3); width: 100%; max-width: 500px; max-height: 90vh; overflow-y: auto;" @onclick:stopPropagation="true">
            <div style="padding: 20px 24px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0; color: #0A3161; font-size: 20px; font-weight: 600;">@(selectedEvent.Title ?? "Untitled Event")</h3>
                <button style="background: none; border: none; font-size: 24px; color: #999; cursor: pointer; padding: 0; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border-radius: 4px;" @onclick="CloseEventModal">&times;</button>
            </div>

            <div style="padding: 24px;">
                <div style="margin-bottom: 24px;">
                    <div style="display: flex; margin-bottom: 12px; align-items: flex-start;">
                        <span style="font-weight: 600; color: #0A3161; min-width: 80px; margin-right: 12px;">Date:</span>
                        <span style="color: #1A1A1A; flex: 1;">@selectedEvent.Date.ToString("dddd, MMMM dd, yyyy")</span>
                    </div>
                    <div style="display: flex; margin-bottom: 12px; align-items: flex-start;">
                        <span style="font-weight: 600; color: #0A3161; min-width: 80px; margin-right: 12px;">Time:</span>
                        <span style="color: #1A1A1A; flex: 1;">@SafeFormatTimeSpan(selectedEvent.StartTime) - @SafeFormatTimeSpan(selectedEvent.EndTime)</span>
                    </div>
                    <div style="display: flex; margin-bottom: 12px; align-items: flex-start;">
                        <span style="font-weight: 600; color: #0A3161; min-width: 80px; margin-right: 12px;">Type:</span>
                        <span style="padding: 4px 8px; border-radius: 4px; color: white; font-size: 12px; font-weight: 500; text-transform: uppercase; background-color: @GetEventBackgroundColor(selectedEvent.Type);">@selectedEvent.Type.ToString()</span>
                    </div>
                    <div style="display: flex; margin-bottom: 12px; align-items: flex-start;">
                        <span style="font-weight: 600; color: #0A3161; min-width: 80px; margin-right: 12px;">Group:</span>
                        <span style="color: #1A1A1A; flex: 1;">@(selectedEvent.Group?.Name ?? "No Group")</span>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedEvent.Description))
                    {
                        <div style="display: flex; flex-direction: column; align-items: stretch;">
                            <span style="font-weight: 600; color: #0A3161; margin-bottom: 4px;">Description:</span>
                            <span style="padding: 8px; background-color: #f8f9fa; border-radius: 4px; border-left: 3px solid #C1A87D; color: #1A1A1A;">@selectedEvent.Description</span>
                        </div>
                    }
                </div>

                @if ((isTeacher || isAdmin) && canEditEvent)
                {
                    <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 24px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
                        <button style="background-color: #0A3161; color: white; padding: 12px 24px; border-radius: 6px; font-weight: 500; cursor: pointer; border: none;" @onclick="EditEvent">Edit Event</button>
                        <button style="background-color: #dc3545; color: white; padding: 12px 24px; border-radius: 6px; font-weight: 500; cursor: pointer; border: none;" @onclick="DeleteEvent">Delete Event</button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@* Add/Edit Event Modal *@
@if (showAddEventModal && (isTeacher || isAdmin))
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; padding: 20px;" @onclick="CloseAddEventModal">
        <div style="background-color: white; border-radius: 8px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3); width: 100%; max-width: 600px; max-height: 90vh; overflow-y: auto;" @onclick:stopPropagation="true">
            <div style="padding: 20px 24px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0; color: #0A3161; font-size: 20px; font-weight: 600;">@(editingEvent != null ? "Edit Event" : "Add New Event")</h3>
                <button style="background: none; border: none; font-size: 24px; color: #999; cursor: pointer; padding: 0; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border-radius: 4px;" @onclick="CloseAddEventModal">&times;</button>
            </div>

            <div style="padding: 24px;">
                <EditForm Model="@eventForm" OnValidSubmit="SaveEvent">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(eventErrorMessage))
                    {
                        <div style="padding: 12px 16px; border-radius: 4px; margin-bottom: 20px; border: 1px solid #f5c6cb; color: #721c24; background-color: #f8d7da;">@eventErrorMessage</div>
                    }

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 500; color: #0A3161;">Event Title</label>
                        <InputText @bind-Value="eventForm.Title" style="width: 100%; padding: 10px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" placeholder="Enter event title" />
                        <ValidationMessage For="@(() => eventForm.Title)" />
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 500; color: #0A3161;">Description</label>
                        <InputTextArea @bind-Value="eventForm.Description" style="width: 100%; padding: 10px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; resize: vertical; min-height: 80px;" placeholder="Event description (optional)" rows="3" />
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-bottom: 20px;">
                        <div>
                            <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 500; color: #0A3161;">Date</label>
                            <InputDate @bind-Value="eventForm.Date" style="width: 100%; padding: 10px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" />
                            <ValidationMessage For="@(() => eventForm.Date)" />
                        </div>
                        <div>
                            <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 500; color: #0A3161;">Type</label>
                            <InputSelect @bind-Value="eventForm.Type" style="width: 100%; padding: 10px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;">
                                @foreach (EventType type in Enum.GetValues<EventType>())
                                {
                                    <option value="@type">@type.ToString()</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-bottom: 20px;">
                        <div>
                            <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 500; color: #0A3161;">Start Time</label>
                            <InputText @bind-Value="startTimeString" @oninput="ValidateTimeFormat" style="width: 100%; padding: 10px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" placeholder="HH:MM (e.g., 09:30)" />
                            @if (!string.IsNullOrEmpty(timeValidationError))
                            {
                                <div style="color: #dc3545; font-size: 12px; margin-top: 4px;">@timeValidationError</div>
                            }
                        </div>
                        <div>
                            <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 500; color: #0A3161;">End Time</label>
                            <InputText @bind-Value="endTimeString" @oninput="ValidateTimeFormat" style="width: 100%; padding: 10px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" placeholder="HH:MM (e.g., 11:00)" />
                        </div>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 500; color: #0A3161;">Group</label>
                        <InputSelect @bind-Value="eventForm.GroupId" style="width: 100%; padding: 10px 12px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;">
                            <option value="0">Select a group...</option>
                            @foreach (var group in userGroups)
                            {
                                <option value="@group.Id">@group.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => eventForm.GroupId)" />
                    </div>

                    <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 24px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
                        <button type="submit" style="background-color: #0A3161; color: white; padding: 12px 24px; border-radius: 6px; font-weight: 500; cursor: pointer; border: none;" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>@(editingEvent != null ? "Update Event" : "Create Event")</span>
                            }
                        </button>
                        <button type="button" style="background-color: #6c757d; color: white; padding: 12px 24px; border-radius: 6px; font-weight: 500; cursor: pointer; border: none;" @onclick="CloseAddEventModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<EventResponseDto> events = new();
    private List<GroupSummaryDto> userGroups = new();
    private DateTime currentDate = DateTime.Now;
    private bool isLoading = true;
    private bool isTeacher = false;
    private bool isAdmin = false;
    private bool canEditEvent = false;

    // Event details modal
    private bool showEventModal = false;
    private EventResponseDto? selectedEvent = null;

    // Add/Edit event modal
    private bool showAddEventModal = false;
    private EventResponseDto? editingEvent = null;
    private EventFormModel eventForm = new() { Title = "", Description = "" };
    private string startTimeString = "";
    private string endTimeString = "";
    private string eventErrorMessage = "";
    private string timeValidationError = "";
    private bool isSubmitting = false;

    // Filters
    private int selectedGroupId = 0;
    private string selectedEventType = ""; 
    private string searchTerm = ""; 

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;

        try
        {
            // Load user data to check role
            var user = await UserService.GetCurrentUserAsync();
            if (user != null)
            {
                isTeacher = user.Role.Equals("Teacher", StringComparison.OrdinalIgnoreCase);
                isAdmin = user.Role.Equals("Admin", StringComparison.OrdinalIgnoreCase);

                userGroups = user.Groups ?? new List<GroupSummaryDto>();
            }

            // Load events
            events = await EventService.GetEventsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading calendar data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<CalendarDay> GetCalendarDays()
    {
        var days = new List<CalendarDay>();

        // Simple calendar generation
        var firstDay = new DateTime(currentDate.Year, currentDate.Month, 1);
        var lastDay = firstDay.AddMonths(1).AddDays(-1);

        // Find Monday of the first week
        var startDay = firstDay;
        while (startDay.DayOfWeek != DayOfWeek.Monday)
        {
            startDay = startDay.AddDays(-1);
        }

        // Find Sunday of the last week
        var endDay = lastDay;
        while (endDay.DayOfWeek != DayOfWeek.Sunday)
        {
            endDay = endDay.AddDays(1);
        }

        var filteredEvents = events
            .Where(e => (selectedGroupId == 0 || e.GroupId == selectedGroupId) &&
                        (string.IsNullOrEmpty(selectedEventType) || e.Type.ToString() == selectedEventType) &&
                        (string.IsNullOrEmpty(searchTerm) ||
                         (e.Title?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                         (e.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)))
            .ToList();

        // Generate all days
        for (var date = startDay; date <= endDay; date = date.AddDays(1))
        {
            var dayEvents = filteredEvents.Where(e => e.Date.Date == date.Date).ToList();
			dayEvents.Sort((a, b) => a.StartTime.CompareTo(b.StartTime));

            days.Add(new CalendarDay
                {
                    Date = date,
                    IsCurrentMonth = date.Month == currentDate.Month,
                    IsToday = date.Date == DateTime.Today,
                    Events = dayEvents
                });
        }

        return days;
    }

    private string GetEventBackgroundColor(EventType type)
    {
        return type switch
        {
            EventType.Lecture => "#4CAF50",      // Green
            EventType.Seminar => "#2196F3",      // Blue
            EventType.Practice => "#FF9800",     // Orange
            EventType.Laboratory => "#9C27B0",   // Purple
            EventType.Exam => "#f44336",         // Red
            EventType.Other => "#607D8B",        // Blue Gray
            _ => "#666"                          // Default Gray
        };
    }

    private string SafeFormatTimeSpan(TimeSpan timeSpan)
    {
        try
        {
            if (timeSpan.TotalHours >= 24)
            {
                return "Invalid";
            }
            return timeSpan.ToString(@"hh\:mm");
        }
        catch
        {
            return "??:??";
        }
    }

    private void ValidateTimeFormat(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";

        // Clear previous validation error
        timeValidationError = "";

        if (!string.IsNullOrEmpty(value))
        {
            // Check format using regex: HH:MM
            var timePattern = @"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$";
            if (!Regex.IsMatch(value, timePattern))
            {
                timeValidationError = "Please use HH:MM format (e.g., 09:30, 14:00)";
            }
        }
    }

    private void PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
    }

    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
    }

    private void ShowEventDetails(EventResponseDto eventItem)
    {
        selectedEvent = eventItem;
        canEditEvent = isTeacher || isAdmin;
        showEventModal = true;
    }

    private void CloseEventModal()
    {
        showEventModal = false;
        selectedEvent = null;
    }

    private void ShowAddEventModal()
    {
        editingEvent = null;
        eventForm = new EventFormModel { Date = DateTime.Today, Title = "", Description = "" };
        startTimeString = "";
        endTimeString = "";
        eventErrorMessage = "";
        timeValidationError = "";
        showAddEventModal = true;
    }

    private void EditEvent()
    {
        if (selectedEvent != null)
        {
            editingEvent = selectedEvent;
            eventForm = new EventFormModel
                {
                    Title = selectedEvent.Title ?? "",
                    Description = selectedEvent.Description ?? "",
                    Date = selectedEvent.Date.Date,
                    Type = selectedEvent.Type,
                    GroupId = selectedEvent.GroupId
                };
            startTimeString = SafeFormatTimeSpan(selectedEvent.StartTime);
            endTimeString = SafeFormatTimeSpan(selectedEvent.EndTime);
            eventErrorMessage = "";
            timeValidationError = "";
            showEventModal = false;
            showAddEventModal = true;
        }
    }

    private async Task DeleteEvent()
    {
        if (selectedEvent != null)
        {
            var success = await EventService.DeleteEventAsync(selectedEvent.Id);
            if (success)
            {
                events.Remove(selectedEvent);
                CloseEventModal();
                StateHasChanged();
            }
        }
    }

    private void CloseAddEventModal()
    {
        showAddEventModal = false;
        editingEvent = null;
        eventForm = new() { Title = "", Description = "" };
        eventErrorMessage = "";
        timeValidationError = "";
    }

    private async Task SaveEvent()
    {
        isSubmitting = true;
        eventErrorMessage = "";
        timeValidationError = "";

        try
        {
            // Validate time format before parsing
            if (!IsValidTimeFormat(startTimeString))
            {
                eventErrorMessage = "Please enter a valid start time in HH:MM format (e.g., 09:30)";
                return;
            }

            if (!IsValidTimeFormat(endTimeString))
            {
                eventErrorMessage = "Please enter a valid end time in HH:MM format (e.g., 11:00)";
                return;
            }

            if (!TimeSpan.TryParse(startTimeString, out var startTime) ||
                !TimeSpan.TryParse(endTimeString, out var endTime))
            {
                eventErrorMessage = "Please enter valid time formats (HH:MM)";
                return;
            }

            if (startTime >= endTime)
            {
                eventErrorMessage = "End time must be after start time";
                return;
            }

            if (eventForm.GroupId == 0)
            {
                eventErrorMessage = "Please select a group";
                return;
            }

            if (editingEvent != null)
            {
                // Update existing event
                var updateDto = new EventUpdateDto
                    {
                        Title = eventForm.Title,
                        Description = eventForm.Description ?? "",
                        Date = DateTime.SpecifyKind(eventForm.Date, DateTimeKind.Utc),
                        StartTime = startTime,
                        EndTime = endTime,
                        Type = eventForm.Type,
						GroupId = eventForm.GroupId
                    };

                var updatedEvent = await EventService.UpdateEventAsync(editingEvent.Id, updateDto);
                if (updatedEvent != null)
                {
                    // Find and replace the event in the list
                    var index = events.FindIndex(e => e.Id == editingEvent.Id);
                    if (index >= 0)
                    {
                        events[index] = updatedEvent;
                    }
                    CloseAddEventModal();
                    StateHasChanged(); // Force UI refresh
                }
                else
                {
                    eventErrorMessage = "Failed to update event";
                }
            }
            else
            {
                // Create new event
                var createDto = new EventCreateDto
                    {
                        Title = eventForm.Title,
                        Description = eventForm.Description ?? "",
                        Date = DateTime.SpecifyKind(eventForm.Date, DateTimeKind.Utc),
                        StartTime = startTime,
                        EndTime = endTime,
                        Type = eventForm.Type,
                        GroupId = eventForm.GroupId
                    };

                var newEvent = await EventService.CreateEventAsync(createDto);
                if (newEvent != null)
                {
                    events.Add(newEvent);
                    CloseAddEventModal();
                    StateHasChanged(); // Force UI refresh
                }
                else
                {
                    eventErrorMessage = "Failed to create event";
                }
            }
        }
        catch (Exception ex)
        {
            eventErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private bool IsValidTimeFormat(string timeString)
    {
        if (string.IsNullOrWhiteSpace(timeString))
            return false;

        // Check format using regex: HH:MM
        var timePattern = @"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$";
        return Regex.IsMatch(timeString, timePattern);
    }

    public class CalendarDay
    {
        public DateTime Date { get; set; }
        public bool IsCurrentMonth { get; set; }
        public bool IsToday { get; set; }
        public List<EventResponseDto> Events { get; set; } = new();
    }

    public class EventFormModel
    {
        public string Title { get; set; } = "";
        public string? Description { get; set; } = "";
        public DateTime Date { get; set; } = DateTime.Today;
        public EventType Type { get; set; } = EventType.Lecture;
        public int GroupId { get; set; }
    }
}